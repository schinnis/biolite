

<!-- Bold Apps: Customer Pricing -->
{% include 'shappify-csp' %}


<!-- csp tag-HIDE --> 
{% assign csp_visible = true %}
{% for product_tag in product.tags %}
{% if csp_visible == true %}
{% capture last_tag_piece %}{{ product_tag | split: '-' | last }}{% endcapture %}
{% if last_tag_piece == 'HIDE' %}
{% capture first_tag_piece %}{{ product_tag | split: '-' | first }}{% endcapture %}
 
{% if first_tag_piece == 'default' %}
{% assign csp_visible = false %}
{% assign csp_tag_group = shop.metafields.shop_csp_tag_group.shop_csp_tag | split: ',' %}
{% for csp_tag in csp_tag_group %}
{% if customer.tags contains csp_tag %}
{% assign csp_visible = true %}
{% endif %}
{% endfor %}
{% else %}
{% if customer.tags contains first_tag_piece %}
{% assign csp_visible = false %}
{% endif %}
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
 
<!-- biolite product meta -->
{% assign product_modules = product.metafields.product_module %}
 
{% if csp_visible == false %} 
Product is not available
{% else %}
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}

<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'grande' }}">

  <div class="grid-item large--one-whole">

        <h1 itemprop="name">{{ product.title }}</h1>
        

        <h3 itemprop="description">{{ product.description }}</h3>

        <a href="{{ product.images.first.src | product_img_url: 'grande' }}">
          <img src="{{ product.images.first.src | product_img_url: 'grande' }}" alt="{{ product.images.first.alt | escape }}"> 
        </a>

  </div>


  

  <div class="grid">

    {% if product_modules.video_hero %} 
    <div class="grid-item large--one-whole">

        <div class="video_hero">
          {{ product_modules.video_hero }}
        </div>

    </div>
    {% endif %} 

    <div class="grid-item large--one-half">

      {% comment %}
        If we only have one product image, show a large version of it.
        If we have more than 1, show it then loop through the rest as thumbnails.
      {% endcomment %}
      {% if product.images.size == 0 %}

        <div class="product-photo-container" id="productPhoto">
          <img src="{{ '' | product_img_url: 'grande' }}" alt="" id="productPhotoImg">
        </div>

      {% else %}

        <div class="product-photo-container" id="productPhoto">
          <a href="{{ product.featured_image.src | product_img_url: 'original' }}">
            <img src="{{ product.featured_image.src | product_img_url: 'grande' }}" alt="{{ product.featured_image.alt | escape }}" id="productPhotoImg">
          </a>
        </div>

        {% comment %}
          If we have more than one product image, loop through them and create thumbnails.

          By default, images will link to their grande size (600x600).
          Thumbnail swapping is enabled in shop.js.liquid.
        {% endcomment %}
        {% if product.images.size > 1 %}
          <ul class="product-photo-thumbs grid-uniform" id="productThumbs">

            {% for image in product.images %}
              <li class="grid-item one-quarter">
                <a href="{{ image.src | product_img_url: 'grande' }}" class="product-photo-thumb">
                  <img src="{{ image.src | product_img_url: 'compact' }}" alt="{{ image.alt | escape }}"> 
                </a>
              </li>
            {% endfor %}

          </ul>
        {% endif %}

      {% endif %}

    </div>

    <div class="grid-item large--one-half">

      <div itemprop="offers" itemscope itemtype="http://schema.org/Offer">

        <meta itemprop="priceCurrency" content="{{ shop.currency }}">

        {% if product.available %}
          <link itemprop="availability" href="http://schema.org/InStock">
        {% else %}
          <link itemprop="availability" href="http://schema.org/OutOfStock">
        {% endif %}

        {% comment %}
          ID addToCartForm is a selector for the ajaxify cart plugin
        {% endcomment %}
        <form action="/cart/add" method="post" enctype="multipart/form-data" id="addToCartForm">

          {% comment %}
            Add product variants as a dropdown.
              - By default, each variant (or combination of variants) will display as its own <option>
              - To separate these into multiple steps, which we suggest, use option_selection.js (see below)

            You can leverage jQuery to add a callback on page load and each time the select element changes:
              - Include option_selection.js (as seen at the bottom of this file)
              - This allows you to use JavaScript anytime the variant dropdown changes
              - This also separates out your variant options (ie. size, color, etc.) to separate select elements

            For more information on products with multiple options, visit:
              - http://docs.shopify.com/support/your-website/themes/can-i-make-my-theme-use-products-with-multiple-options#update-product-liquid

          {% endcomment %}
          <select name="id" id="productSelect" class="product-variants">
            {% for variant in product.variants %}
              {% if variant.available %}

                {% comment %}
                  Note: if you use option_selection.js, your <select> tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
                {% endcomment %}
                {% include 'shappify-variant-is-csp' %}
                {% if csp_variant == 1 %}
                  <option value="{{variant.id}}">
                    {{ variant.title }} - {{ variant.price | money_with_currency }}
                  </option>
                {% endif %}

              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - Sold out
                </option>
              {% endif %}
            {% endfor %}
          </select>


          {% assign tag_price = 0 %}
          {% assign tag = 'default' %}

          {% if customer.tags.size > 0 %}
            {% for cust_tag in customer.tags %}
              {% if product.metafields.shappify_csp[cust_tag] %}
              { % assign tag = cust_tag %}
              {% endif %}
            {% endfor %}
          {% endif %}

          {% if product.metafields.shappify_csp[tag] %}
            {% assign tag_price = 1 %}
          {% endif %}
          
          {% if tag_price != 1 %}
            <span id="productPrice" class="h2{% if product.compare_at_price > product.price %} on-sale{% endif %}" itemprop="price">
            {{ product.price | money }}
            </span>

            {% if product.compare_at_price > product.price %}
              <span id="comparePrice" class="h5">
                Compare at:
                {{ product.compare_at_price_max | money }}
              </span>
            {% endif %}

          
          {% else %}

            {% capture attribute_price_min %}{{tag}}_raw_lownum{% endcapture %}
            {% capture attribute_price_max %}{{tag}}_price_high{% endcapture %}
            {% capture attribute_price %}{{tag}}{% endcapture %}
           
            <span id="productPrice" class="h2{% if product.compare_at_price > product.price %} on-sale{% endif %}" itemprop="price">
              {{ product.metafields.shappify_csp[attribute_price] }}
            </span>

            {% if product.compare_at_price > product.price %}
              <span id="comparePrice" class="h5">
                Compare at: {{ product.compare_at_price_max | money }}
              </span>
            {% endif %}
           
          {% endif %}



          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" value="1" min="1">

          <input type="submit" name="add" class="btn" id="addToCart" value="Add to Cart">
          
        </form>
        
        <div class="product-description rte" itemprop="description">
          {{ product.description }}
          {% include 'addthis' %}
        </div>

      </div>

      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
      {% endcomment %}
      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>

          {% if collection.previous_product %}
            {% capture prev_url %}{{ collection.previous_product}}#content{% endcapture %}
            <span class="left">
              {{ '&larr; Previous Product' | link_to: prev_url }}
            </span>
          {% endif %}

          {% if collection.next_product %}
            {% capture next_url %}{{ collection.next_product}}#content{% endcapture %}
            <span class="right">
              {{ 'Next Product &rarr;' | link_to: next_url }}
            </span>
          {% endif %}

          </p>
        {% endif %}
      {% endif %}

    </div>
  </div>


</div>

  <div id="shopify-product-reviews" data-id="{{product.id}}">{{ product.metafields.spr.reviews }}</div>



{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS below as you need. This is only needed on pages where
  product variants are accessible, so doesn't need to live in theme.liquid.

  Currently, the code below does:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>

var selectCallback = function(variant, selector) {

  var addToCart = $('#addToCart'),
      productPrice = $('#productPrice'),
      comparePrice = $('#comparePrice');

  if (variant) {
    if (variant.available) {
      // We have a valid product variant, so enable the submit button
      addToCart.removeClass('disabled').prop('disabled', false).val('Add to Cart');

    } else {
      // Variant is sold out, disable the submit button
      addToCart.val('Sold Out').addClass('disabled').prop('disabled', true);
    }

    // Regardless of stock, update the product price
    productPrice.html(Shopify.formatMoney(variant.price, "{{ shop.money_format }}"));

    // Also update and show the product's compare price if necessary
    if ( variant.compare_at_price > variant.price ) {
      comparePrice
        .html('Compare at: ' + Shopify.formatMoney(variant.compare_at_price, "{{ shop.money_format }}"))
        .show();
    } else {
      comparePrice.hide();
    }

  } else {
    // The variant doesn't exist, disable submit button.
    // This may be an error or notice that a specific variant is not available.
    // To only show available variants, implement linked product options:
    //   - http://docs.shopify.com/manual/configuration/store-customization/advanced-navigation/linked-product-options
    addToCart.val('Unavailable').addClass('disabled').prop('disabled', true);
  }
};

jQuery(function($) {

  new Shopify.OptionSelectors('productSelect', {
    product: {{ product | json }},
    onVariantSelected: selectCallback
  });

  // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
  {% if product.options.size == 1 and product.options.first != 'Title' %}
    $('.selector-wrapper:eq(0)').prepend('<label>{{ product.options.first | escape }}</label>');
  {% endif %}

  // Hide selectors if we only have 1 variant and its title contains 'Default'.
  {% if shappify_csp_options_count == 1 and product.variants.first.title contains 'Default' %}
    $('.selector-wrapper').hide();
  {% endif %}

  // Auto-select first available variant on page load. Otherwise the product looks sold out.
  {% assign found_one_in_stock = false %}
  {% for variant in product.variants %}
    {% if variant.available and found_one_in_stock == false %}
      {% assign found_one_in_stock = true %}
      {% for option in product.options %}
      $('.single-option-selector:eq({{ forloop.index0 }})').val({{ variant.options[forloop.index0] | json }}).trigger('change');
      {% endfor %}
    {% endif %}
  {% endfor %}

});
</script>

{% endif %}
